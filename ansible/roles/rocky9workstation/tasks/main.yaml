
# TODO Add SauceCodePro install
# TODO Add XRDP config to launch i3
# TODO Download iso's for VM's


- name: "Install packages"
  become: true
  ansible.builtin.dnf:
    name:
      - "vim"
      - "cowsay"
      - "dmenu"
      - "emacs"
      - "epel-release"
      - "gh"
      - "git "
      - "i3status"
      - "neovim"
      - "podman"
      - "docker"
      - "xrdp"
      - "nano"
      - "rust"
      - "nodejs"
      - "ruby"
      - "gimp"
      - "firefox"
      - "thunar"
      - "qbittorrent"
      - "fzf"
      - "ranger"
      - "terminator"
      - "fortune-mod"
      - "cowsay"
      - "ranger"
      - "zsh"
      - "stow"
      - "bc"
      - "tree"
      - "tmux"
      - "net-tools"
      - "nginx"
      - "qemu-kvm"
      - "libvirt"
      - "virt-manager"
      - "virt-install"
      - "bridge-utils"
      - "virt-top"
      - "libguestfs-tools"
      - "bridge-utils"
      - "virt-viewer"
    state: "latest"


- name: "Put SELinux in permissive mode, logging actions that would be blocked."
  become: true
  ansible.posix.selinux:
    policy: "targeted"
    state: "permissive"

- name: "Create users"
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "wheel"
    password: "{{ item | password_hash('sha512') }}"
  loop: 
      - "andrew"
      - "silas"
      - "fei"
      - "bun"

# TODO Download and install compton

- name: "Download Bitwarden"
  become: true
  ansible.builtin.get_url:
    url: "https://github.com/bitwarden/clients/releases/download/desktop-v2024.2.0/Bitwarden-2024.2.0-x86_64.rpm"
    dest: "/root/Downloads"
    mode: '0440'

- name: "INstall bitwarden"
  ansible.builtin.dnf:
    name: "/root/Downloads/Bitwarden-2024.2.0-x86_64.rpm"
    state: "present"
    disable_gpg_check: true

- name: "Set up home environment"
  block:

  - name: "Get Length of ansible home path files"
    become: true
    become_user: "andrew"
    set_fact:
      target_home_directory: "/home/andrew"

  - name: "Clone tmux"
    become: true
    become_user: "andrew"
    ansible.builtin.git:
      repo: 'https://github.com/gpakosz/.tmux.git'
      dest: "{{ target_home_directory }}/repos/.tmux"

  - name: "install ohmytmux"
    become: true
    become_user: "andrew"
    ansible.builtin.shell: |
      mkdir -p "{{ target_home_directory }}/.config/tmux"
      ln -s "{{ target_home_directory }}/repos/.tmux/.tmux.conf" "{{ target_home_directory }}/.config/tmux/tmux.conf"
      cp "{{ target_home_directory }}/repos/.tmux/.tmux.conf.local" "{{ target_home_directory }}/.config/tmux/tmux.conf.local"
    args:
      creates: "{{ target_home_directory }}/.config/tmux/tmux.conf.local"

  - name: "install ohmyzsh"
    become: true
    become_user: "andrew"
    ansible.builtin.shell: |
      sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    args:
      creates: "{{ target_home_directory }}/.oh-my-zsh/"

  - name: "download and extract go"
    become: true
    become_user: "andrew"
    ansible.builtin.unarchive:
      src: "https://go.dev/dl/go1.22.0.linux-amd64.tar.gz"
      dest: "{{ target_home_directory }}/.local/"
      remote_src: true

  - name: "download and extract terraform"
    become: true
    become_user: "andrew"
    ansible.builtin.unarchive:
      src: "https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip"
      dest: "{{ target_home_directory }}/.local/bin"
      remote_src: true

  - name: "Install neovim packer plugin manager"
    become: true
    become_user: "andrew"
    ansible.builtin.shell: |
      git clone --depth 1 https://github.com/wbthomason/packer.nvim \
       {{ target_home_directory }}/.local/share/nvim/site/pack/packer/start/packer.nvim
    args:
      creates: "{{ target_home_directory }}/.local/share/nvim/site/pack/packer/start/packer.nvim"

  - name: "Install Doom EMACS"
    become: true
    become_user: "andrew"
    ansible.builtin.shell: |
      git clone --depth 1 https://github.com/doomemacs/doomemacs {{ target_home_directory }}/.config/emacs
      {{ target_home_directory }}/.config/emacs/bin/doom install
    args:
      creates: "{{ target_home_directory }}/.config/emacs/bin/doom"

  - name: "Set ansible home path file path"
    become: true
    become_user: "andrew"
    set_fact:
      ansible_home_path: "{{ role_path }}/files/home/"

  - name: "list directories"
    become: true
    become_user: "andrew"
    find:
      paths: "{{ ansible_home_path }}"
      file_type: "directory"
      hidden: true
      recurse: true
    register: "home_directories"

  - name: "list files"
    become: true
    become_user: "andrew"
    find:
      paths: "{{ ansible_home_path }}"
      file_type: "file"
      hidden: true
      recurse: true
    register: "home_files"

  - name: "Get Length of ansible home path files"
    become: true
    become_user: "andrew"
    set_fact:
      ansible_path_len: "{{ ansible_home_path | length }}"

  - name: "create directories"
    become: true
    become_user: "andrew"
    ansible.builtin.file:
      path: "{{ target_home_directory }}/{{ item.path[ansible_path_len | int:] }}" 
      state: "directory"
    loop: "{{ home_directories.files }}"

  - name: "copy files"
    become: true
    become_user: "andrew"
    copy:
      src: "{{ item.path }}"
      dest: "{{ target_home_directory }}/{{ item.path[ansible_path_len | int:] }}" 
    loop: "{{ home_files.files }}"


- name: "Enable virtualization"
  become: true
  ansible.builtin.systemd_service:
    name: "libvirtd"
    state: "started"
    enabled: true 

- name: "Define vm from xml and set autostart"
  become: true
  community.libvirt.virt:
    command: "define"
    xml: "{{ lookup('file', 'virsh_definitions/temple_os.xml') }}"
    state: "running"
    name: "temple_os"

- name: "Define vm from xml and set autostart"
  become: true
  community.libvirt.virt:
    command: "define"
    xml: "{{ lookup('file', 'virsh_definitions/nixos.xml') }}"
    autostart: true
    name: "nix_os"
    state: "running"
